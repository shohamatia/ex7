shoham.at
yreisler



=============================
=      File description     =
=============================

- Configuration.java - Class that helps with running the main method.
- TextSearcher.java - The test program - A text searching module that indexes and queries large corpses for
strings or word groups.
- dataStructures:
    - dictionary:
        - DictionaryIndexer.java - An implementation of the abstract Aindexer class, backed by a simple
        hashMap to store words and their locations within the files.
        - HashMapWrapper.java - Wrapper class for hashMap<Integer, List<Word>>.
    - naive:
        - NaiveIndexer.java - A "naive" indexer. This approach forgoes actually pre-processing the file, and
        simply loads the text and searches directly on it.
        - NaiveIndexerRK.java - A "naive" indexer. This approach forgoes actually pre-processing the file, and
        simply loads the text and searches directly on it using the Rabin-Karp Algorithm.
    - Aindexer.java - The abstract class describing the necessary methods and common implementations of all
    indexing data structures.
- processing:
    - parsingRules:
        - IparsingRule.java - An interface describing the contract any parser should maintain, as well as
        possible default methods.
        - parsingRuleRegex.java - Class that defines the regex expressions for searching the files.
        - SimpleParsingRule.java - Class that defines the simple parsing of a file.
        - STmovieParsingRule.java - Class that defines the parsing of a movie script.
        - STtvSeriesParsingRule.java - Class that defines the parsing of the script of an episode of a TV
        show.
    - searchStrategies:
        - DictionarySearch.java - Implements searching in an dictionary indexer.
        - IsearchStrategy.java - A functional interface describing the contract any search Strategy must
        implement.
        - NaiveSearch.java - Implements naive searching.
        - NaiveSearchRK.java - Implements searching with Rabin-Karp Algorithm.
    - textStructure:
        - Block.java - This class represents an arbitrary block of text within a file.
        - Corpus.java - This class represents a body of works - anywhere between one and thousands of
        documents sharing the same structure and that can be parsed by the same parsing rule.
        - Entry.java - This class represents a single file within a Corpus.
        - MultiWordResult.java - This class defines a query result for multiple non-consecutive words.
        - Word.java - Wrapper class for a single word containing relevant attributes for distance calculation
        and string extraction from the containing block or file.
        - WordResult.java - This class represents a result containing a single string (single word or multiple
        words treated as one).
- utils:
    - MD5.java
    - Stemmer.java
    - Stopwords.java
    - WrongMD5ChecksumException.java


===========================================
=          Answers to questions           =
===========================================

- Given a pattern P of length m and a text string S of length n, the time complexity of the naive search
algorithm is going throw all the substrings of length m meaning (if P is from the same characters of S or if
is the same but the last one, in that case we will run n-m+1 times on the string for m times, O(m*(n-m+1)).

====================
=   pseudo-code:   =
====================
NaiveSearch(pat, txt):
    m = pat.len
    n = tat.len
    for i in range{0, n-m+1}:
        j=0
        for j in range{0 , m}:
            if txt[i+j] is not equal to pat[j]:
                brake
        if j == m - 1:
            return i

- Implementation of metadata:
    we give the information about the characters in the scene, the scene name and number, the credits of this
    episode/ movie and the file it was found in.
    we store the metadata in Linked List and add to it when we create the blocks in the parseFile method.



============================
=  Implementation issues   =
============================
Configuration.java TextSearcher.java DictionaryIndexer.java NaiveIndexer.java NaiveIndexerRK.java Aindexer.java IparsingRule.java parsingRuleRegex.java SimpleParsingRule.java STmovieParsingRule.java STtvSeriesParsingRule.java DictionarySearch.java